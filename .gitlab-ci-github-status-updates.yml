variables:
  GITHUB_AUTH: "Authorization: bearer $GITHUB_BOT_TOKEN"

  GITHUB_STATUS_API_URL: "https://api.github.com/repos/mendersoftware/$CI_PROJECT_NAME/statuses/$CI_COMMIT_SHA"
  GITHUB_STATUS_API_JSON_F: '{"state": "%s", "context": "ci/gitlab", "target_url": "%s", "description": "%s"}'

stages:
  # These have no effect and are only for documentation purposes. .pre and .post
  # stages run at the very start and very end of a pipeline, regardless of where
  # they are defined.
  - .pre
  - .post

github:start:
  stage: .pre
  except:
    - /^(master|staging|[0-9]+\.[0-9]+\.x)$/
  # Keep overhead low by using a small image with curl preinstalled.
  image: appropriate/curl
  script:
    - 'JSON="$(printf "$GITHUB_STATUS_API_JSON_F" pending "$CI_PIPELINE_URL" "Pipeline running on Gitlab")"'
    - 'curl -f -H "$GITHUB_AUTH" -d "$JSON" "$GITHUB_STATUS_API_URL"'

github:success:
  stage: .post
  except:
    - /^(master|staging|[0-9]+\.[0-9]+\.x)$/
  when: on_success
  # Keep overhead low by using a small image with curl preinstalled.
  image: appropriate/curl
  script:
    - 'JSON="$(printf "$GITHUB_STATUS_API_JSON_F" success "$CI_PIPELINE_URL" "Pipeline passed on Gitlab")"'
    - 'curl -f -H "$GITHUB_AUTH" -d "$JSON" "$GITHUB_STATUS_API_URL"'

github:failure:
  stage: .post
  except:
    - /^(master|staging|[0-9]+\.[0-9]+\.x)$/
  when: on_failure
  # Keep overhead low by using a small image with curl preinstalled.
  image: appropriate/curl
  script:
    - 'JSON="$(printf "$GITHUB_STATUS_API_JSON_F" failure "$CI_PIPELINE_URL" "Pipeline failed on Gitlab")"'
    - 'curl -f -H "$GITHUB_AUTH" -d "$JSON" "$GITHUB_STATUS_API_URL"'
