# .gitlab-ci-check-license.yml
#
# This gitlab-ci template runs license tests
#
# Add it to the project in hand through Gitlab's include functionality.
#
# include:
#   - project: 'Northern.tech/Mender/mendertesting'
#     file: '.gitlab-ci-check-license.yml'
#
# If the repository includes enterprise (aka, non-Open-Source) Go lang code, you
# can specify the first git commit SHA of the enterprise code, also known as
# forking commit, setting the FIRST_ENT_COMMIT env variable.
#
# You can add known license files setting the KNOWN_LICENSE_FILES env variable
# to a list of space separated files to include to the list of auto-detected
# license files.
#
# With regards to source code files, you can exclude files via regular
# expression with the variable LICENSE_HEADERS_IGNORE_FILES_REGEXP.
#
#Â test:check-license:
#   variables:
#     FIRST_ENT_COMMIT: "<sha>"
#     KNOWN_LICENSE_FILES: "path/to/README.md path/to-another/LICENSE.md"
#     LICENSE_HEADERS_IGNORE_FILES_REGEXP: '\./exclude-this/.*\.py'
#

variables:
  # Variables defined here are fallbacks if not defined elsewhere.
  GOLANG_VERSION:
    description: "Container image version for golang used in jobs"
    value: "1.24"

stages:
  - test

test:check-license:
  tags:
    - hetzner-amd-beefy
  stage: test
  needs: []
  rules:
    - exists:
      - licenses.csv
      when: never
    - when: always
  image: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/alpine
  variables:
    GIT_STRATEGY: clone # clone entire repo instead of reusing workspace
    GIT_DEPTH: 0 # avoid shallow clone, this test requires full git history
  before_script:
    # Install dependencies
    - apk add --no-cache git bash perl-utils
    # Rename the branch we're on, so that it's not in the way for the
    # subsequent fetch. It's ok if this fails, it just means we're not on any
    # branch.
    - git branch -m temp-branch || true
    # Git trick: Fetch directly into our local branches instead of remote
    # branches.
    - git fetch -f origin 'refs/heads/*:refs/heads/*'
    # Get last remaining tags, if any.
    - git fetch --tags origin
    - if [ "$CI_PROJECT_NAME" = "mendertesting" ]; then
    -   SCRIPT_PATH=$PWD
    - else
    -   git clone --depth=1 https://github.com/mendersoftware/mendertesting /tmp/mendertesting
    -   SCRIPT_PATH=/tmp/mendertesting
    - fi
  script:
    # Check licenses
    - $SCRIPT_PATH/check_license.sh

test:check-license:golang:
  image: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/golang:${GOLANG_VERSION}
  tags:
    - hetzner-amd-beefy
  stage: test
  rules:
    - exists:
        - licenses.csv
      when: always
    - exists:
        - LIC_FILES_CHKSUM.sha256
      when: never
  needs: []
  before_script:
    - go install github.com/google/go-licenses@latest
    - git clone --no-tags --depth=1 --single-branch https://github.com/mendersoftware/mendertesting /tmp/mendertesting
  script:
    - go-licenses report . --ignore github.com/mendersoftware --template /tmp/mendertesting/go_licenses_format.tpl > licenses.csv
    - git diff --exit-code

test:check-license-source:
  tags:
    - hetzner-amd-beefy
  stage: test
  needs: []
  image: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/alpine
  variables:
    GIT_STRATEGY: clone # clone entire repo instead of reusing workspace
    GIT_DEPTH: 0 # avoid shallow clone, this test requires full git history
  before_script:
    # Install dependencies
    - apk add --no-cache git bash perl-utils grep
    # Rename the branch we're on, so that it's not in the way for the
    # subsequent fetch. It's ok if this fails, it just means we're not on any
    # branch.
    - git branch -m temp-branch || true
    # Git trick: Fetch directly into our local branches instead of remote
    # branches.
    - git fetch -f origin 'refs/heads/*:refs/heads/*'
    # Get last remaining tags, if any.
    - git fetch --tags origin
    - if [ "$CI_PROJECT_NAME" = "mendertesting" ]; then
    - SCRIPT_PATH=$PWD
    - else
    - git clone --depth=1 https://github.com/mendersoftware/mendertesting /tmp/mendertesting
    - SCRIPT_PATH=/tmp/mendertesting
    - fi
  script:
    # Check licenses
    - $SCRIPT_PATH/check_license_source_files.sh
