# .gitlab-ci-check-golang-unittests.yml
#
# This gitlab-ci template runs unit tests and publishes code coverage
# from a Go repository
#
# Add it to the project in hand through Gitlab's include functionality
#
# include:
#   - project: 'Northern.tech/Mender/mendertesting'
#     file: '.gitlab-ci-check-golang-unittests.yml'
#
# If the repo has some compile time dependencies, the template expect to
# exist a deb-requirements.txt file with the Debian OS required packages
#
# The template uses latest Mender supported golang version.
# To override the version to use, append to your .gitlab-ci.yml:
# test:unit:
#   image: golang:1.11.4
#
# Requires the following variables set in the project CI/CD settings:
#   COVERALLS_TOKEN: Token from coveralls.io for this repository
#
# By default, it installs MongoDB version 4.4 for Debian buster. You can
# specify the Debian release name for the upstream APT repository and
# the MongoDB version overriding the variables below:
#
# test:unit:
#   variables:
#     MONGODB_DEBIAN_RELEASE: "stretch"
#     MONGODB_VERSION: "3.6"
#

stages:
  - test
  - publish

test:unit:
  stage: test
  needs: []
  except:
    - /^saas-[a-zA-Z0-9.]+$/
  image: golang:1.16
  services:
    - mongo:4.4
  variables:
    GIT_DEPTH: 0
    MONGODB_DEBIAN_RELEASE: "buster"
    MONGODB_VERSION: "4.4"
  before_script:
    # Install code coverage tooling
    - GO111MODULE=off go get -u github.com/axw/gocov/gocov

    # Install JUnit test reporting formatter
    - GO111MODULE=off go get -u github.com/jstemmer/go-junit-report/...

    # mongodb-org package needs systemd, this circumnavigates the issue providing a fake systemctl command
    - ln -s /bin/true /usr/sbin/systemctl

    # Install mongodb for the tests that use it locally
    - wget -qO - https://www.mongodb.org/static/pgp/server-${MONGODB_VERSION}.asc | apt-key add -
    - echo "deb http://repo.mongodb.org/apt/debian ${MONGODB_DEBIAN_RELEASE}/mongodb-org/${MONGODB_VERSION} main" | tee /etc/apt/sources.list.d/mongodb-org-${MONGODB_VERSION}.list
    - apt-get -qq update
    - apt-get install -qy mongodb-org

    # Install compile dependencies
    - if [ -f deb-requirements.txt ]; then
    -   apt install -yq $(cat deb-requirements.txt)
    - fi

    # Rename the branch we're on, so that it's not in the way for the
    # subsequent fetch. It's ok if this fails, it just means we're not on any
    # branch.
    - git branch -m temp-branch || true
    # Git trick: Fetch directly into our local branches instead of remote
    # branches.
    - git fetch origin 'refs/heads/*:refs/heads/*'
    # Get last remaining tags, if any.
    - git fetch --tags origin

    # Prepare GOPATH
    - mkdir -p /go/src/github.com/mendersoftware
    - cp -r ${CI_PROJECT_DIR} /go/src/github.com/mendersoftware/${CI_PROJECT_NAME}
    - cd /go/src/github.com/mendersoftware/${CI_PROJECT_NAME}
  script:
    - go list ./... | grep -v vendor | xargs -n1 -I {} go test -v -covermode=atomic -coverprofile=../../../{}/coverage.txt {} 2>&1 | tee /dev/stderr | go-junit-report > ${CI_PROJECT_DIR}/test-results.xml || exit $?
    - mkdir -p tests/unit-coverage && find . -name 'coverage.txt' -exec cp --parents {} ./tests/unit-coverage \;
    - tar -cvf ${CI_PROJECT_DIR}/unit-coverage.tar tests/unit-coverage
  artifacts:
    expire_in: 2w
    paths:
      - unit-coverage.tar
    reports:
      junit: test-results.xml
    when: always

publish:unittests:
  stage: publish
  except:
    - /^saas-[a-zA-Z0-9.]+$/
  image: golang:1.16-alpine3.14
  dependencies:
    - test:unit
  before_script:
    # Install dependencies
    - apk add --no-cache git
    - GO111MODULE=off go get -u github.com/mattn/goveralls
    # Prepare GOPATH
    - mkdir -p /go/src/github.com/mendersoftware
    - cp -r ${CI_PROJECT_DIR} /go/src/github.com/mendersoftware/${CI_PROJECT_NAME}
    - cd /go/src/github.com/mendersoftware/${CI_PROJECT_NAME}
    # Coveralls env variables:
    #  According to https://docs.coveralls.io/supported-ci-services
    #  we should set CI_NAME, CI_BUILD_NUMBER, etc. But according
    #  to goveralls source code (https://github.com/mattn/goveralls)
    #  many of these are not supported. Set CI_BRANCH,
    #  and pass few others as command line arguments.
    #  See also https://docs.coveralls.io/api-reference
    - export CI_BRANCH=${CI_COMMIT_BRANCH}
  script:
    - tar -xvf unit-coverage.tar
    - goveralls
      -repotoken ${COVERALLS_TOKEN}
      -service gitlab-ci
      -jobid $CI_PIPELINE_ID
      -covermode set
      -flagname unittests
      -parallel
      -coverprofile $(find tests/unit-coverage -name 'coverage.txt' | tr '\n' ',' | sed 's/,$//')

coveralls:finish-build:
  stage: .post
  # See https://docs.coveralls.io/parallel-build-webhook
  variables:
    COVERALLS_WEBHOOK_URL: "https://coveralls.io/webhook"
  image: appropriate/curl
  script:
    - 'curl -k ${COVERALLS_WEBHOOK_URL}?repo_token=${COVERALLS_TOKEN} -d "payload[build_num]=$CI_PIPELINE_ID&payload[status]=done"'
